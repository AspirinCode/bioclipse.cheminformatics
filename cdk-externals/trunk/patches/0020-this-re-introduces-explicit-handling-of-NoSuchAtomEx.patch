From 90b12470f72990cadfb03aacfcb361b6c9c0f877 Mon Sep 17 00:00:00 2001
From: shk3 <shk3@fcb5ba71-d80d-0410-8237-ba3920747fcc>
Date: Fri, 5 Jun 2009 17:50:14 +0000
Subject: [PATCH] this re-introduces explicit handling of NoSuchAtomException in modelbuilder3d, which was lost due to 1.2.x update.

git-svn-id: https://bioclipse.svn.sourceforge.net/svnroot/bioclipse/bioclipse2/trunk@11074 fcb5ba71-d80d-0410-8237-ba3920747fcc
---
 .../cdk/modeling/builder3d/ModelBuilder3D.java     |    3 ++-
 .../modeling/builder3d/ForceFieldConfigurator.java |   14 ++++++++------
 2 files changed, 10 insertions(+), 7 deletions(-)

diff --git a/cdk-externals/trunk/org.openscience.cdk.builder3d/src/org/openscience/cdk/modeling/builder3d/ModelBuilder3D.java b/cdk-externals/trunk/org.openscience.cdk.builder3d/src/org/openscience/cdk/modeling/builder3d/ModelBuilder3D.java
index e32d2fc..abc7b1f 100644
--- a/cdk-externals/trunk/org.openscience.cdk.builder3d/src/org/openscience/cdk/modeling/builder3d/ModelBuilder3D.java
+++ b/cdk-externals/trunk/org.openscience.cdk.builder3d/src/org/openscience/cdk/modeling/builder3d/ModelBuilder3D.java
@@ -34,6 +34,7 @@ import javax.vecmath.Vector3d;
 
 import org.openscience.cdk.CDKConstants;
 import org.openscience.cdk.exception.CDKException;
+import org.openscience.cdk.exception.NoSuchAtomTypeException;
 import org.openscience.cdk.geometry.GeometryTools;
 import org.openscience.cdk.graph.ConnectivityChecker;
 import org.openscience.cdk.interfaces.IAtom;
@@ -150,7 +151,7 @@ public class ModelBuilder3D {
 	/**
 	 * Generate 3D coordinates with force field information.
 	 */
-	public IMolecule generate3DCoordinates(IMolecule molecule, boolean clone) throws Exception {
+	public IMolecule generate3DCoordinates(IMolecule molecule, boolean clone) throws NoSuchAtomTypeException, Exception {
 	    String[] originalAtomTypeNames = new String[molecule.getAtomCount()];
 	    for (int i=0; i<originalAtomTypeNames.length; i++) {
 	        originalAtomTypeNames[i] = molecule.getAtom(i).getAtomTypeName();
diff --git a/cdk-externals/trunk/org.openscience.cdk.forcefield/src/org/openscience/cdk/modeling/builder3d/ForceFieldConfigurator.java b/cdk-externals/trunk/org.openscience.cdk.forcefield/src/org/openscience/cdk/modeling/builder3d/ForceFieldConfigurator.java
index f1bb290..c52f021 100644
--- a/cdk-externals/trunk/org.openscience.cdk.forcefield/src/org/openscience/cdk/modeling/builder3d/ForceFieldConfigurator.java
+++ b/cdk-externals/trunk/org.openscience.cdk.forcefield/src/org/openscience/cdk/modeling/builder3d/ForceFieldConfigurator.java
@@ -242,7 +242,7 @@ public class ForceFieldConfigurator {
 	 *@return                sssrf set
 	 *@exception  Exception  Description of the Exception
 	 */
-	public IRingSet assignAtomTyps(IMolecule molecule) throws Exception {
+	public IRingSet assignAtomTyps(IMolecule molecule) throws NoSuchAtomTypeException, CDKException {
 		IAtom atom = null;
 		String hoseCode = "";
 		HOSECodeGenerator hcg = new HOSECodeGenerator();
@@ -291,9 +291,11 @@ public class ForceFieldConfigurator {
 			}
 			try {
 				configureAtom(atom, hoseCode, isInHeteroRing);
+			} catch(NoSuchAtomTypeException ex){
+			    throw ex;
 			} catch (CDKException ex2) {
 				System.out.println("Could not final configure atom " + i + " due to " + ex2.toString());
-				throw new Exception("Could not final configure atom due to problems with force field", ex2);
+				throw new CDKException("Could not final configure atom due to problems with force field", ex2);
 			}
 		}
 		
@@ -351,7 +353,7 @@ public class ForceFieldConfigurator {
 	 * @param  ID    the atom type id
 	 * @return       the assigned atom
 	 */
-	private IAtom setAtom(IAtom atom, String ID) throws Exception {
+	private IAtom setAtom(IAtom atom, String ID) throws NoSuchAtomTypeException {
 		IAtomType at = null;
 		String key = "";
 		List<?> data = null;
@@ -385,7 +387,7 @@ public class ForceFieldConfigurator {
 		return atom;
 	}
 	
-	public IAtom configureAtom(IAtom atom, String hoseCode, boolean _boolean) throws Exception {
+	public IAtom configureAtom(IAtom atom, String hoseCode, boolean _boolean) throws NoSuchAtomTypeException, CDKException {
 		if (ffName.equals("mm2")){
 			return configureMM2BasedAtom(atom, hoseCode,_boolean);
 		}else if (ffName.equals("mmff94")){
@@ -402,7 +404,7 @@ public class ForceFieldConfigurator {
 	 * @return                   atom
 	 * @exception  CDKException  Description of the Exception
 	 */
-	public IAtom configureMM2BasedAtom(IAtom atom, String hoseCode,boolean hetRing) throws Exception {
+	public IAtom configureMM2BasedAtom(IAtom atom, String hoseCode,boolean hetRing) throws NoSuchAtomTypeException {
 		//logger.debug("CONFIGURE MM2 ATOM");
 		List<Pattern> atomTypePattern = null;
 		MM2BasedAtomTypePattern atp = new MM2BasedAtomTypePattern();
@@ -560,7 +562,7 @@ public class ForceFieldConfigurator {
 	 * @return                   atom
 	 * @exception  CDKException  Description of the Exception
 	 */
-	public IAtom configureMMFF94BasedAtom(IAtom atom, String hoseCode, boolean isInHetRing) throws Exception {
+	public IAtom configureMMFF94BasedAtom(IAtom atom, String hoseCode, boolean isInHetRing) throws NoSuchAtomTypeException {
 		//logger.debug("****** Configure MMFF94 AtomType ******");
 		List<Pattern> atomTypePattern = null;
 		MMFF94BasedAtomTypePattern atp = new MMFF94BasedAtomTypePattern();
-- 
1.6.0.4

