From b51f8c77658ef37f73bc1247913ac6e0b677de82 Mon Sep 17 00:00:00 2001
From: egonw <egonw@fcb5ba71-d80d-0410-8237-ba3920747fcc>
Date: Tue, 5 May 2009 13:17:46 +0000
Subject: [PATCH] Patching GeometryTools and ICDKChangeEvent from jchempaint-primary

Was git-svn-id:
  https://bioclipse.svn.sourceforge.net/svnroot/bioclipse/bioclipse2/trunk@9295 fcb5ba71-d80d-0410-8237-ba3920747fcc

Author:    goglepox <goglepox@fcb5ba71-d80d-0410-8237-ba3920747fcc>

git-svn-id: https://bioclipse.svn.sourceforge.net/svnroot/bioclipse/bioclipse2/trunk@10070 fcb5ba71-d80d-0410-8237-ba3920747fcc
---
 .../openscience/cdk/event/ICDKChangeListener.java  |    7 +++
 .../openscience/cdk/geometry/GeometryTools.java    |   43 +++++++++++++++++--
 2 files changed, 45 insertions(+), 5 deletions(-)

diff --git a/cdk-externals/trunk/org.openscience.cdk.standard/src/org/openscience/cdk/event/ICDKChangeListener.java b/cdk-externals/trunk/org.openscience.cdk.standard/src/org/openscience/cdk/event/ICDKChangeListener.java
index 6152988..482d3f7 100644
--- a/cdk-externals/trunk/org.openscience.cdk.standard/src/org/openscience/cdk/event/ICDKChangeListener.java
+++ b/cdk-externals/trunk/org.openscience.cdk.standard/src/org/openscience/cdk/event/ICDKChangeListener.java
@@ -44,5 +44,12 @@ public interface ICDKChangeListener extends EventListener
 	 * @param   event  The EventObject
 	 */
     void stateChanged(EventObject event);
+    
+	/**
+	 * Invoked when the target of the listener has changed its zoom factor.
+	 *
+	 * @param   event  The EventObject
+	 */
+	void zoomFactorChanged(EventObject event);
 }
 
diff --git a/cdk-externals/trunk/org.openscience.cdk.standard/src/org/openscience/cdk/geometry/GeometryTools.java b/cdk-externals/trunk/org.openscience.cdk.standard/src/org/openscience/cdk/geometry/GeometryTools.java
index 34dc26d..3103c5e 100644
--- a/cdk-externals/trunk/org.openscience.cdk.standard/src/org/openscience/cdk/geometry/GeometryTools.java
+++ b/cdk-externals/trunk/org.openscience.cdk.standard/src/org/openscience/cdk/geometry/GeometryTools.java
@@ -44,7 +44,7 @@ import java.util.List;
 /**
  * A set of static utility classes for geometric calculations and operations.
  * This class is extensively used, for example, by JChemPaint to edit molecule.
- * All methods in this class change the coordinates of the atoms. Use GeometryTools if you use an external set of coordinates (e. g. renderingCoordinates from RendererModel)
+ * All methods in this class change the coordinates of the atoms. Use GeometryTools if you use an external set of coordinates (e. g. rendeirngCoordinates from RendererModel)
  *
  * @author        seb
  * @author        Stefan Kuhn
@@ -671,6 +671,39 @@ public class GeometryTools {
 	}
 	/**
 	 *  Returns the atom of the given molecule that is closest to the given
+	 *  coordinates and is not the atom.
+	 *  See comment for center(IAtomContainer atomCon, Dimension areaDim, HashMap renderingCoordinates) for details on coordinate sets
+	 *
+	 *@param  xPosition  The x coordinate
+	 *@param  yPosition  The y coordinate
+	 *@param  atomCon    The molecule that is searched for the closest atom
+	 *@param toignore    This molecule will not be returned.
+	 *@return            The atom that is closest to the given coordinates
+	 */
+	public static IAtom getClosestAtom(double xPosition, double yPosition, IAtomContainer atomCon, IAtom toignore) {
+		IAtom closestAtom = null;
+		IAtom currentAtom;
+		double smallestMouseDistance = -1;
+		double mouseDistance;
+		double atomX;
+		double atomY;
+		for (int i = 0; i < atomCon.getAtomCount(); i++) {
+			currentAtom = atomCon.getAtom(i);
+			if(currentAtom!=toignore){
+				atomX = currentAtom.getPoint2d().x;
+				atomY = currentAtom.getPoint2d().y;
+				mouseDistance = Math.sqrt(Math.pow(atomX - xPosition, 2) + Math.pow(atomY - yPosition, 2));
+				if (mouseDistance < smallestMouseDistance || smallestMouseDistance == -1) {
+					smallestMouseDistance = mouseDistance;
+					closestAtom = currentAtom;
+				}
+			}
+		}
+		return closestAtom;
+	}
+	
+	/**
+	 *  Returns the atom of the given molecule that is closest to the given
 	 *  coordinates.
 	 *  See comment for center(IAtomContainer atomCon, Dimension areaDim, HashMap renderingCoordinates) for details on coordinate sets
 	 *
@@ -1005,9 +1038,9 @@ public class GeometryTools {
 	 *@return            The bestAlignmentForLabel value
 	 */
 	public static int getBestAlignmentForLabel(IAtomContainer container, IAtom atom) {
-		double overallDiffX = 0;
+		int overallDiffX = 0;
 		for (IAtom connectedAtom : container.getConnectedAtomsList(atom)) {
-			overallDiffX += connectedAtom.getPoint2d().x - atom.getPoint2d().x;
+			overallDiffX = overallDiffX + (int) (connectedAtom.getPoint2d().x - atom.getPoint2d().x);
 		}
 		if (overallDiffX <= 0) {
 			return 1;
@@ -1310,7 +1343,7 @@ public class GeometryTools {
 	 *@param  firstAtomContainer                the (largest) first aligned AtomContainer which is the reference
 	 *@param  secondAtomContainer               the second aligned AtomContainer
 	 *@param  mappedAtoms             			Map: a Map of the mapped atoms
-	 *@param  Coords3d            			    boolean: true if molecules has 3D coords, false if molecules has 2D coords
+	 *@param  Coords3d            			    boolean: true if moecules has 3D coords, false if molecules has 2D coords
 	 *@return                   				double: the value of the RMSD 
 	 *@exception  CDKException  if there is an error in getting mapped atoms
 	 *
@@ -1351,7 +1384,7 @@ public class GeometryTools {
 	 *@param  secondAtomContainer               the second aligned AtomContainer
 	 *@param  mappedAtoms             			Map: a Map of the mapped atoms
 	 *@param hetAtomOnly                        boolean: true if only hetero atoms should be considered
-	 *@param  Coords3d            			    boolean: true if molecules has 3D coords, false if molecules has 2D coords
+	 *@param  Coords3d            			    boolean: true if moecules has 3D coords, false if molecules has 2D coords
 	 *@return                   				double: the value of the RMSD 
 	 *
 	 **/
-- 
1.6.0.4

